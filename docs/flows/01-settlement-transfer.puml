@startuml

title Settlement Transfer - Refer to Reference Architecture: [https://miro.com/app/board/o9J_lJyA1TA=/]

box External-Transfer-System #FFFFF9
    participant "Central-Ledger" as ext_cl
    note over ext_cl
        //TransferCommitt//
        Liquidity account balances
        are kept in Central-Ledger.
    end note
    note over ext_cl
        Central-Ledger Liquidity check
        functionality remains unchanged.
    end note
    participant "Transfer-BC" as ext_transfers_bc
    note over ext_transfers_bc
        //TransferCommittedFulfiled//
        gRPC client for settlements are invoked.
    end note
end box

box Settlements BC #F9FFF9
	participant "Rest API" as sbc_rest #D5E8D4
	participant "Event Listener" as sbc_event #D5E8D4
	participant "gRPC" as sbc_grpc #D5E8D4
	participant "Settlements BC\nApp Logic" as sbc_app_logic #EDC54D
	database "Settlements-Database" as sbc_db #DAE8FC
end box

box Accounts and Balances BC #FFFFF9
    participant "gRPC" as abbc_grpc #D5E8D4
    participant "TigerBeetle" as abbc_tigerbeetle #D5E8D4
    note over abbc_grpc
        Exposed interface for
        Accounts and Balances.
    end note
    note over abbc_tigerbeetle
        TigerBeetle may be turned off/on.
    end note
end box

group 1.1 Create Settlement Transfer - Central Ledger
autonumber
    ext_cl <-> ext_cl : Obtain settlement model
    ext_cl -> sbc_rest : At time of fulfil:\n//createSettlementTransfer// \n**(settlement transfer data payload)**
    sbc_rest -> sbc_app_logic : Invoke the App layer
autonumber
    ext_cl <-> ext_cl : Obtain settlement model
    ext_cl -> sbc_event : At time of fulfil:\n//publishEvent// \n**(settlement transfer data payload and queue)**
    sbc_event -> sbc_app_logic : Invoke the App layer
end

group 1.2 Create Settlement Transfer - Transfers BC
autonumber
    ext_cl <-> ext_cl : Obtain settlement model
    ext_cl -> sbc_grpc : At time of fulfil:\n//createSettlementTransfer// \n**(settlement transfer data)**
    sbc_grpc -> sbc_app_logic : Invoke the App layer
end

group 2. Settlement - App Logic
autonumber
    sbc_app_logic <--> sbc_app_logic: Settlement Transfer event triggered
    sbc_app_logic --> sbc_app_logic : Validate **settlement transfer data payload**
    sbc_app_logic <--> sbc_db : Fetch and cache settlement configuration\n**TODO - This needs to be updated**
    sbc_app_logic <--> sbc_db : Obtain current open settlement batch based on \n**settlement transfer data payload**\n//New OPEN Batch will be created if no OPEN batch is available//
    sbc_app_logic <-> abbc_grpc : Obtain Debit/Credit **Settlement Accounts** based on participant account info\n//(The settlement accounts are derived and linked from the participant accounts)//
    abbc_grpc <--> abbc_tigerbeetle : Create account \nif 'not exists'
    abbc_grpc -> sbc_app_logic : Return **Account** creation info
    sbc_app_logic -> abbc_grpc: Create Settlement Transfer
    abbc_grpc <-> abbc_tigerbeetle: Debit Payer, Credit Payee
    abbc_grpc -> sbc_app_logic : Return **Transfer** creation info
    sbc_app_logic <--> sbc_app_logic: Return **Transfer/Account** info based on: \n-> REST - Account balance info\n-> gRPC - Account balance info\n-> Event - Publish Event
end

group 3. Settlement - Retrieve Batches
autonumber
    ext_cl -> sbc_rest : At time of fulfil:\n//retrieveSettlementBatches// \nINPUT:\n-> **From Date** - From\n-> **To Date** - To\n-> **Settlement Model** - Model //(optional)//\nOUTPUT:\n-> **Settlement Batches** - Batches
    sbc_rest -> sbc_app_logic : Request settlement batches
    sbc_app_logic -> abbc_grpc : Retrieve settlement batch accounts
    abbc_grpc <-> abbc_tigerbeetle : Retrieve settlement batch accounts and balances
    abbc_grpc -> sbc_app_logic : Return **Account** creation info
    sbc_app_logic --> sbc_app_logic : Prepare data for batch response
    sbc_app_logic -> sbc_rest : Return **Batches** info
    sbc_rest -> ext_cl : Return **Batches** info
autonumber

end

@enduml
